#include<opencv2/opencv.hpp>
#include<iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <tracking.hpp>



using namespace std;
using namespace cv;
#define SSTR( x ) static_cast< ostringstream & >( ( ostringstream() << dec << x ) ).str()

String filename = "C:/openCV3.4/opencv3.4r/etc/haarcascades/haarcascade_frontalface_alt.xml";
String lefteyename = "C:/openCV3.4/opencv3.4r/etc/haarcascades/haarcascade_eye.xml";
String righteyename = "C:/openCV3.4/opencv3.4r/etc/haarcascades/haarcascade_eye.xml";
String mouth = "C:/openCV3.4/opencv3.4r/etc/haarcascades/haarcascade_eye.xml";
CascadeClassifier face_classifier, lefteye_classifier, righteye_classifier;
int main(int argc, char** argv) {
	if (!face_classifier.load(filename)) {
		printf("could not load face data...\n");
		return -1;
	}
	if (!lefteye_classifier.load(lefteyename)) {
		printf("could not load face data...\n");
		return -1;
	}
	if (!righteye_classifier.load(righteyename)) {
		printf("could not load face data...\n");
		return -1;
	}
	//视频检测
	VideoCapture capture(0);
	Mat frame, gray, leftgrayeyes, rightgrayeyes;
	
	vector<Rect>faces;	
	vector<Rect>eyes;
	int nframes = 1;//帧数
	
	while (nframes < 2)
	{
		capture >> frame;
		flip(frame, frame, 1);   //修复摄像头，防止左右颠倒
		cvtColor(frame, gray, COLOR_BGR2GRAY);//转为灰度
		equalizeHist(gray, gray);//直方图均匀化

		Mat lefteyeroi, righteyeroi;
		face_classifier.detectMultiScale(gray, faces, 1.2, 3, 0, Size(30, 30));   //detect face
		for (size_t i = 0; i < faces.size(); i++)
		{
			rectangle(frame, faces[i], Scalar(0, 0, 255), 2, 8, 0);

			lefteyeroi = frame(Rect(faces[i].x, faces[i].y, faces[i].height / 2, faces[i].width / 2));
			imshow("roi", lefteyeroi);


			Rect leftRect;
			leftRect.x = faces[i].x;
			leftRect.y = faces[i].y;
			leftRect.width = lefteyeroi.cols;
			leftRect.height = lefteyeroi.rows;
		
			//检测左眼
			lefteye_classifier.detectMultiScale(lefteyeroi, eyes, 1.2, 2, 0, Size(30, 30));

			if (eyes.size())
			{

				leftRect = eyes[0] + Point(leftRect.x, leftRect.y);
				rectangle(frame, leftRect, Scalar(0, 255, 0), 2, 8, 0);
				nframes++;
				cout << nframes << endl;
			}
			else
			{
				nframes = 1;
				cout << nframes << endl;
			}
		}
		imshow("eye_detection", frame);
		waitKey(20);

	}
//追踪

	
		Ptr<Tracker> tracker = TrackerKCF::create();
		Rect2d leftRect = Rect2d(leftRect);
		Mat testimg = gray(leftRect);
		imshow("1",testimg);
		//	rectangle(frame, leftRect, Scalar(255, 0, 0), 2, 1);
		if (!leftRect.empty())
		{
			tracker->init(frame, leftRect);
		}
		
		while (capture.read(frame))
		{
			// Start timer
			double timer = (double)getTickCount();

			// Update the tracking result
			bool ok = tracker->update(frame, leftRect);

			// Calculate Frames per second (FPS)
			double fps = getTickFrequency() / ((double)getTickCount() - timer);

			if (ok)
			{
				// Tracking success : Draw the tracked object
				rectangle(frame, leftRect, Scalar(255, 0, 0), 2, 1);
			}
			else
			{
				nframes = 0;
			}
			// Display tracker type on frame
			putText(frame,  " KCFTracker", Point(100, 20), FONT_HERSHEY_SIMPLEX, 0.75, Scalar(50, 170, 50), 2);

			// Display FPS on frame
			putText(frame, "FPS : " + SSTR(int(fps)), Point(100, 50), FONT_HERSHEY_SIMPLEX, 0.75, Scalar(50, 170, 50), 2);

			// Display frame.
			imshow("Tracking", frame);
		}

		destroyAllWindows();
		nframes = 1;
		return 0;

	}
